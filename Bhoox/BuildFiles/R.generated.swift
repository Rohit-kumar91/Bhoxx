//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ShowCategoryVC`, and contains static references to 1 segues.
    struct showCategoryVC {
      /// Segue identifier `container`.
      static let container: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ShowCategoryVC, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "container")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `container`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func container(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ShowCategoryVC, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.showCategoryVC.container, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginRegisteration`.
    static let loginRegisteration = _R.storyboard.loginRegisteration()
    /// Storyboard `Onboarding`.
    static let onboarding = _R.storyboard.onboarding()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LoginRegisteration", bundle: ...)`
    static func loginRegisteration(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginRegisteration)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Onboarding", bundle: ...)`
    static func onboarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboarding)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `Grey`.
    static let grey = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey")
    /// Color `TextfieldBackground`.
    static let textfieldBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextfieldBackground")
    /// Color `ThemeColor`.
    static let themeColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeColor")
    /// Color `pink`.
    static let pink = Rswift.ColorResource(bundle: R.hostingBundle, name: "pink")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Grey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextfieldBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textfieldBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textfieldBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThemeColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pink, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 35 images.
  struct image {
    /// Image `Right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "Right")
    /// Image `WT1`.
    static let wt1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WT1")
    /// Image `WT2`.
    static let wt2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WT2")
    /// Image `WT3`.
    static let wt3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WT3")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `baground`.
    static let baground = Rswift.ImageResource(bundle: R.hostingBundle, name: "baground")
    /// Image `booking-color`.
    static let bookingColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "booking-color")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `children`.
    static let children = Rswift.ImageResource(bundle: R.hostingBundle, name: "children")
    /// Image `collapse`.
    static let collapse = Rswift.ImageResource(bundle: R.hostingBundle, name: "collapse")
    /// Image `down-grey`.
    static let downGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "down-grey")
    /// Image `explore`.
    static let explore = Rswift.ImageResource(bundle: R.hostingBundle, name: "explore")
    /// Image `face`.
    static let face = Rswift.ImageResource(bundle: R.hostingBundle, name: "face")
    /// Image `fav-color`.
    static let favColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav-color")
    /// Image `filter1`.
    static let filter1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter1")
    /// Image `hair_removal`.
    static let hair_removal = Rswift.ImageResource(bundle: R.hostingBundle, name: "hair_removal")
    /// Image `hair`.
    static let hair = Rswift.ImageResource(bundle: R.hostingBundle, name: "hair")
    /// Image `img_1`.
    static let img_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_1")
    /// Image `img_234`.
    static let img_234 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_234")
    /// Image `img_2`.
    static let img_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_2")
    /// Image `left`.
    static let left = Rswift.ImageResource(bundle: R.hostingBundle, name: "left")
    /// Image `loginLogo`.
    static let loginLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginLogo")
    /// Image `logo_1`.
    static let logo_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_1")
    /// Image `men`.
    static let men = Rswift.ImageResource(bundle: R.hostingBundle, name: "men")
    /// Image `messsage`.
    static let messsage = Rswift.ImageResource(bundle: R.hostingBundle, name: "messsage")
    /// Image `my-bookings`.
    static let myBookings = Rswift.ImageResource(bundle: R.hostingBundle, name: "my-bookings")
    /// Image `my-favourite`.
    static let myFavourite = Rswift.ImageResource(bundle: R.hostingBundle, name: "my-favourite")
    /// Image `nails`.
    static let nails = Rswift.ImageResource(bundle: R.hostingBundle, name: "nails")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `search_1`.
    static let search_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_1")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `shop-color`.
    static let shopColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop-color")
    /// Image `shop`.
    static let shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "shop")
    /// Image `three-dlot`.
    static let threeDlot = Rswift.ImageResource(bundle: R.hostingBundle, name: "three-dlot")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WT1", bundle: ..., traitCollection: ...)`
    static func wt1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wt1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WT2", bundle: ..., traitCollection: ...)`
    static func wt2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wt2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WT3", bundle: ..., traitCollection: ...)`
    static func wt3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wt3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baground", bundle: ..., traitCollection: ...)`
    static func baground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "booking-color", bundle: ..., traitCollection: ...)`
    static func bookingColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookingColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "children", bundle: ..., traitCollection: ...)`
    static func children(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.children, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "collapse", bundle: ..., traitCollection: ...)`
    static func collapse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.collapse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down-grey", bundle: ..., traitCollection: ...)`
    static func downGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "explore", bundle: ..., traitCollection: ...)`
    static func explore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "face", bundle: ..., traitCollection: ...)`
    static func face(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav-color", bundle: ..., traitCollection: ...)`
    static func favColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter1", bundle: ..., traitCollection: ...)`
    static func filter1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hair", bundle: ..., traitCollection: ...)`
    static func hair(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hair, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hair_removal", bundle: ..., traitCollection: ...)`
    static func hair_removal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hair_removal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_1", bundle: ..., traitCollection: ...)`
    static func img_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_2", bundle: ..., traitCollection: ...)`
    static func img_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_234", bundle: ..., traitCollection: ...)`
    static func img_234(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_234, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left", bundle: ..., traitCollection: ...)`
    static func left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loginLogo", bundle: ..., traitCollection: ...)`
    static func loginLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_1", bundle: ..., traitCollection: ...)`
    static func logo_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "men", bundle: ..., traitCollection: ...)`
    static func men(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.men, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "messsage", bundle: ..., traitCollection: ...)`
    static func messsage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messsage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my-bookings", bundle: ..., traitCollection: ...)`
    static func myBookings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myBookings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my-favourite", bundle: ..., traitCollection: ...)`
    static func myFavourite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myFavourite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nails", bundle: ..., traitCollection: ...)`
    static func nails(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nails, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_1", bundle: ..., traitCollection: ...)`
    static func search_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shop", bundle: ..., traitCollection: ...)`
    static func shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shop-color", bundle: ..., traitCollection: ...)`
    static func shopColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "three-dlot", bundle: ..., traitCollection: ...)`
    static func threeDlot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.threeDlot, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Onboarding"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `SaloonStyleChildTC`.
    static let saloonStyleChildTC = _R.nib._SaloonStyleChildTC()
    /// Nib `SaloonStyleTC`.
    static let saloonStyleTC = _R.nib._SaloonStyleTC()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SaloonStyleChildTC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.saloonStyleChildTC) instead")
    static func saloonStyleChildTC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.saloonStyleChildTC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SaloonStyleTC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.saloonStyleTC) instead")
    static func saloonStyleTC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.saloonStyleTC)
    }
    #endif

    static func saloonStyleChildTC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SaloonStyleChildTC? {
      return R.nib.saloonStyleChildTC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaloonStyleChildTC
    }

    static func saloonStyleTC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SaloonStyleTC? {
      return R.nib.saloonStyleTC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaloonStyleTC
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CategoryCC`.
    static let categoryCC: Rswift.ReuseIdentifier<CategoryCC> = Rswift.ReuseIdentifier(identifier: "CategoryCC")
    /// Reuse identifier `SaloonStyleChildTC`.
    static let saloonStyleChildTC: Rswift.ReuseIdentifier<SaloonStyleChildTC> = Rswift.ReuseIdentifier(identifier: "SaloonStyleChildTC")
    /// Reuse identifier `SaloonStyleTC`.
    static let saloonStyleTC: Rswift.ReuseIdentifier<SaloonStyleTC> = Rswift.ReuseIdentifier(identifier: "SaloonStyleTC")
    /// Reuse identifier `SaloonTC`.
    static let saloonTC: Rswift.ReuseIdentifier<SaloonTC> = Rswift.ReuseIdentifier(identifier: "SaloonTC")
    /// Reuse identifier `SearchTableCell`.
    static let searchTableCell: Rswift.ReuseIdentifier<SearchTableCell> = Rswift.ReuseIdentifier(identifier: "SearchTableCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SaloonStyleChildTC.validate()
      try _SaloonStyleTC.validate()
    }

    struct _SaloonStyleChildTC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SaloonStyleChildTC

      let bundle = R.hostingBundle
      let identifier = "SaloonStyleChildTC"
      let name = "SaloonStyleChildTC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SaloonStyleChildTC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaloonStyleChildTC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plus.circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus.circle' is used in nib 'SaloonStyleChildTC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey' is used in storyboard 'SaloonStyleChildTC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "pink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'pink' is used in storyboard 'SaloonStyleChildTC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SaloonStyleTC: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SaloonStyleTC

      let bundle = R.hostingBundle
      let identifier = "SaloonStyleTC"
      let name = "SaloonStyleTC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SaloonStyleTC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaloonStyleTC
      }

      static func validate() throws {
        if UIKit.UIImage(named: "info.circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'info.circle' is used in nib 'SaloonStyleTC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus.circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus.circle' is used in nib 'SaloonStyleTC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey' is used in storyboard 'SaloonStyleTC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "pink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'pink' is used in storyboard 'SaloonStyleTC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try loginRegisteration.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onboarding.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let categoryMapVC = StoryboardViewControllerResource<CategoryMapVC>(identifier: "CategoryMapVC")
      let categoryVC = StoryboardViewControllerResource<CategoryVC>(identifier: "CategoryVC")
      let name = "Home"
      let portfolioVC = StoryboardViewControllerResource<PortfolioVC>(identifier: "PortfolioVC")
      let searchControllerVC = StoryboardViewControllerResource<SearchControllerVC>(identifier: "SearchControllerVC")
      let showAllCategories = StoryboardViewControllerResource<ShowAllCategories>(identifier: "ShowAllCategories")
      let showAllServicesVC = StoryboardViewControllerResource<ShowAllServicesVC>(identifier: "ShowAllServicesVC")
      let showCategoryVC = StoryboardViewControllerResource<ShowCategoryVC>(identifier: "ShowCategoryVC")
      let tabbarVC = StoryboardViewControllerResource<TabbarVC>(identifier: "TabbarVC")

      func categoryMapVC(_: Void = ()) -> CategoryMapVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryMapVC)
      }

      func categoryVC(_: Void = ()) -> CategoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryVC)
      }

      func portfolioVC(_: Void = ()) -> PortfolioVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: portfolioVC)
      }

      func searchControllerVC(_: Void = ()) -> SearchControllerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchControllerVC)
      }

      func showAllCategories(_: Void = ()) -> ShowAllCategories? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showAllCategories)
      }

      func showAllServicesVC(_: Void = ()) -> ShowAllServicesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showAllServicesVC)
      }

      func showCategoryVC(_: Void = ()) -> ShowCategoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showCategoryVC)
      }

      func tabbarVC(_: Void = ()) -> TabbarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabbarVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Right' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "baground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'baground' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkmark.circle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkmark.circle.fill' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "down-grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'down-grey' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "explore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'explore' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heart' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "line.horizontal.3.decrease.circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'line.horizontal.3.decrease.circle' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_1' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "magnifyingglass", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'magnifyingglass' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mappin.and.ellipse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mappin.and.ellipse' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mic' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my-bookings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my-bookings' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my-favourite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my-favourite' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search_1' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shop' is used in storyboard 'Home', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextfieldBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldBackground' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ThemeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ThemeColor' is used in storyboard 'Home', but couldn't be loaded.") }
          if UIKit.UIColor(named: "pink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'pink' is used in storyboard 'Home', but couldn't be loaded.") }
        }
        if _R.storyboard.home().categoryMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryMapVC' could not be loaded from storyboard 'Home' as 'CategoryMapVC'.") }
        if _R.storyboard.home().categoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryVC' could not be loaded from storyboard 'Home' as 'CategoryVC'.") }
        if _R.storyboard.home().portfolioVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'portfolioVC' could not be loaded from storyboard 'Home' as 'PortfolioVC'.") }
        if _R.storyboard.home().searchControllerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchControllerVC' could not be loaded from storyboard 'Home' as 'SearchControllerVC'.") }
        if _R.storyboard.home().showAllCategories() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showAllCategories' could not be loaded from storyboard 'Home' as 'ShowAllCategories'.") }
        if _R.storyboard.home().showAllServicesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showAllServicesVC' could not be loaded from storyboard 'Home' as 'ShowAllServicesVC'.") }
        if _R.storyboard.home().showCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showCategoryVC' could not be loaded from storyboard 'Home' as 'ShowCategoryVC'.") }
        if _R.storyboard.home().tabbarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabbarVC' could not be loaded from storyboard 'Home' as 'TabbarVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct loginRegisteration: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "LoginRegisteration"
      let registerationVC = StoryboardViewControllerResource<RegisterationVC>(identifier: "RegisterationVC")

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func registerationVC(_: Void = ()) -> RegisterationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerationVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "envelope", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'envelope' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_234", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_234' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginLogo' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "person.circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'person.circle' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "TextfieldBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldBackground' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ThemeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ThemeColor' is used in storyboard 'LoginRegisteration', but couldn't be loaded.") }
        }
        if _R.storyboard.loginRegisteration().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'LoginRegisteration' as 'LoginVC'.") }
        if _R.storyboard.loginRegisteration().registerationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerationVC' could not be loaded from storyboard 'LoginRegisteration' as 'RegisterationVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onboarding: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Onboarding"
      let walkThroughContentVC = StoryboardViewControllerResource<WalkThroughContentVC>(identifier: "WalkThroughContentVC")
      let walkThroughVC = StoryboardViewControllerResource<WalkThroughVC>(identifier: "WalkThroughVC")

      func walkThroughContentVC(_: Void = ()) -> WalkThroughContentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walkThroughContentVC)
      }

      func walkThroughVC(_: Void = ()) -> WalkThroughVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walkThroughVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ThemeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ThemeColor' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        }
        if _R.storyboard.onboarding().walkThroughContentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walkThroughContentVC' could not be loaded from storyboard 'Onboarding' as 'WalkThroughContentVC'.") }
        if _R.storyboard.onboarding().walkThroughVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walkThroughVC' could not be loaded from storyboard 'Onboarding' as 'WalkThroughVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
